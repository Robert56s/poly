// ndc c++

// Hello world
#include <iostream>
using namespace std;

int main() {
  cout << "Hello World!";
  return 0;
}


Types de variable simple : 
int myNum = 5;               // Integer (whole number without decimals)
double myFloatNum = 5.99;    // Floating point number (with decimals)
char myLetter = 'D';         // Character
string myText = "Hello";     // String (text)
bool myBoolean = true;       // Boolean (true or false)
const double PI = 3.14;      // constent (majuscule)


Types pointeur : (variable qui contient l'adresse memoire d'une donnée)
int entier;
int* ptrEntier = &entier;  // & veut dire addresse de la chose et declaration d'un pointeur
*ptrEntier;  // dereference du pointeur

int x = 3;
adresse -> donnee
1       -> 8
2       -> 3
3       -> 6
4       -> 5
5       -> 2

cout << x; // affiche 3
cout << &x; // affiche 2
cout << *x; // affiche 6 (aller chercher ce qui est a l'adresse pointée (marche pas dasn mes test)



Arithmetic Operators :
int x = 10;
int y = 3;

cout << (x + y) << "\n"; // 13
cout << (x - y) << "\n"; // 7
cout << (x * y) << "\n"; // 30
cout << (x / y) << "\n"; // 3 (integer division)
cout << (x % y) << "\n"; // 1
cout << (++x) << "\n"; // 11 
cout << (--x) << "\n"; // 9

(++x evaluer avant de calculer resultat, x++ evaluer apres)
ex: 
int x = 3;
int y = 7;
int z = -5;
int resultat = ++x + y + z++;
cout << resultat; // affiche 6
cout << z; // affiche -4 mais le calcul de resulstat à été fait avec -5

ex2:
int  i = 0;
int tableau[10] = {}; // {} assure d'aficher des 0 au depart et pas ce qui avait avait dans l'adresse
tableau[i++] = 4;
tableau[i++] = 7;
tableau[i++] = 3;
cout << tableau[0] << tableau[1] << tableau[2]; // affiche 4 7 3 (si ++i affiche 0 4 7)


Assignment Operators :
=	x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<=	x <<= 3	x = x << 3

Comparison Operators : 
==	Equal to	x == y	
!=	Not equal	x != y	
>	Greater than	x > y	
<	Less than	x < y	
>=	Greater than or equal to	x >= y	
<=	Less than or equal to	x <= y

Logical Operators:
&& 	Logical and	Returns true if both statements are true	x < 5 &&  x < 10	
|| 	Logical or	Returns true if one of the statements is true	x < 5 || x < 4	
!	Logical not	Reverse the result, returns false if the result is true	!(x < 5 && x < 10)


Priorité Opérateur Associativité :
1 [] () -> . ++(postfixe) --(postfixe) gauche à droite
2 ! ~ ++(préfixe) --(préfixe) -(unaire) +(unaire) (type) *(unaire) &(unaire) sizeof droite à gauche
3 * / % gauche à droite
4 + - gauche à droite
5 << >> gauche à droite
6 < > <= >= gauche à droite
7 == != gauche à droite
8 & gauche à droite
9 ^ gauche à droite
10 | gauche à droite
11 && gauche à droite
12 || gauche à droite
13 ?: = += -= *= /= %= >>= <<= &= ^= |= droite à gauche
14 , gauche à droite
ex : faut cout << (x == 4) et non cout << x == 4  (voir prioriter)
ex: ordre pas tjr determiner x = !(cout << "a") + !(cout << "b") + !(cout << "c")